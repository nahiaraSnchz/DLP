' Generated with VGen 2.0.0

@startuml

class Position {
    +int getLine()
    +int getColumn()
    +boolean lessThan(Position other)
    +boolean greaterThan(Position other)
}

interface AST {
    +updatePositions(Object... children)
    +updatePositions(Position start, Position end)
    +Object accept(Visitor visitor, Object param)
}

AST *-[#404040,thickness=1]- Position : start >
AST *-[#404040,thickness=1]- Position : end >


interface Type {
}
AST <|-[#808080]- Type
abstract AbstractType
Type <|-[#808080]- AbstractType
AbstractAST <|-[#808080]- AbstractType

interface Statement {
}
AST <|-[#808080]- Statement
abstract AbstractStatement
Statement <|-[#808080]- AbstractStatement
AbstractAST <|-[#808080]- AbstractStatement
Statement -[#3366cc,thickness=3]-  Function_definition #text:3366cc : function >

interface Expression {
	..<color:#3366cc> TypeChecking </color>..
	+<color:#3366cc>boolean lvalue</color>
}
AST <|-[#808080]- Expression
abstract AbstractExpression
Expression <|-[#808080]- AbstractExpression
AbstractAST <|-[#808080]- AbstractExpression
Expression -[#3366cc,thickness=3]-  Type #text:3366cc : typeExpression >

interface Declaration {
}
AST <|-[#808080]- Declaration
abstract AbstractDeclaration
Declaration <|-[#808080]- AbstractDeclaration
AbstractAST <|-[#808080]- AbstractDeclaration

interface AST {
}
abstract AbstractAST
AST <|-[#808080]- AbstractAST

class Program {
}
AbstractAST <|-[#808080]- Program
Program o-[#404040,thickness=2]- "✱" Declaration : declarations >

class Variable_definition {
	+String name
	..<color:#ff6600> Identification </color>..
	+<color:#ff6600>boolean global</color>
	..<color:#669900> MemoryAllocation </color>..
	+<color:#669900>int address</color>
}
AbstractDeclaration <|-[#808080]- Variable_definition
Variable_definition o-[#404040,thickness=2]-  Type : type >

class Struct_definition {
	+String name
	..<color:#669900> MemoryAllocation </color>..
	+<color:#669900>int address</color>
}
AbstractDeclaration <|-[#808080]- Struct_definition
Struct_definition o-[#404040,thickness=2]- "✱" Variable_definition : variable_definitions >

class Function_definition {
	+String name
}
AbstractDeclaration <|-[#808080]- Function_definition
Function_definition o-[#404040,thickness=2]- "✱" Variable_definition : params >
Function_definition o-[#404040,thickness=2]-  Type : type >
Function_definition o-[#404040,thickness=2]- "✱" Variable_definition : variable_definitions >
Function_definition o-[#404040,thickness=2]- "✱" Statement : statements >

class Return_statement {
}
AbstractStatement <|-[#808080]- Return_statement
Return_statement o-[#404040,thickness=2]- "0..1" Expression : expression >

class Print_statement {
}
AbstractStatement <|-[#808080]- Print_statement
Print_statement o-[#404040,thickness=2]- "✱" Expression : expressions >

class Printsp_statement {
}
AbstractStatement <|-[#808080]- Printsp_statement
Printsp_statement o-[#404040,thickness=2]- "✱" Expression : expressions >

class Println_statement {
}
AbstractStatement <|-[#808080]- Println_statement
Println_statement o-[#404040,thickness=2]- "✱" Expression : expressions >

class Read_statement {
}
AbstractStatement <|-[#808080]- Read_statement
Read_statement o-[#404040,thickness=2]-  Expression : expression >

class While_statement {
}
AbstractStatement <|-[#808080]- While_statement
While_statement o-[#404040,thickness=2]-  Expression : expression >
While_statement o-[#404040,thickness=2]- "✱" Statement : statements >

class If_statement {
}
AbstractStatement <|-[#808080]- If_statement
If_statement o-[#404040,thickness=2]-  Expression : expression >
If_statement o-[#404040,thickness=2]- "✱" Statement : st1 >
If_statement o-[#404040,thickness=2]- "✱" Statement : st2 >

class Assigment_statement {
}
AbstractStatement <|-[#808080]- Assigment_statement
Assigment_statement o-[#404040,thickness=2]-  Expression : left >
Assigment_statement o-[#404040,thickness=2]-  Expression : right >

class Function_call_statement {
	+String name
}
AbstractStatement <|-[#808080]- Function_call_statement
Function_call_statement o-[#404040,thickness=2]- "✱" Expression : expressions >
Function_call_statement -[#ff6600,thickness=3]-  Function_definition #text:ff6600 : function_definition >

class Unary_expression {
}
AbstractExpression <|-[#808080]- Unary_expression
Unary_expression o-[#404040,thickness=2]-  Expression : expression >

class Arythmetic_expression {
	+String operador
}
AbstractExpression <|-[#808080]- Arythmetic_expression
Arythmetic_expression o-[#404040,thickness=2]-  Expression : left >
Arythmetic_expression o-[#404040,thickness=2]-  Expression : right >

class Cast_expression {
}
AbstractExpression <|-[#808080]- Cast_expression
Cast_expression o-[#404040,thickness=2]-  Type : type >
Cast_expression o-[#404040,thickness=2]-  Expression : expression >

class Comparative_expression {
	+String operador
}
AbstractExpression <|-[#808080]- Comparative_expression
Comparative_expression o-[#404040,thickness=2]-  Expression : left >
Comparative_expression o-[#404040,thickness=2]-  Expression : right >

class Logical_expression {
	+String operador
}
AbstractExpression <|-[#808080]- Logical_expression
Logical_expression o-[#404040,thickness=2]-  Expression : left >
Logical_expression o-[#404040,thickness=2]-  Expression : right >

class Parenthesized_expression {
}
AbstractExpression <|-[#808080]- Parenthesized_expression
Parenthesized_expression o-[#404040,thickness=2]-  Expression : expression >

class Expression_call {
	+String name
}
AbstractExpression <|-[#808080]- Expression_call
Expression_call o-[#404040,thickness=2]- "✱" Expression : expressions >
Expression_call -[#ff6600,thickness=3]-  Function_definition #text:ff6600 : function_definition >

class Struct_access {
	+String name
}
AbstractExpression <|-[#808080]- Struct_access
Struct_access o-[#404040,thickness=2]-  Expression : expression >

class Array_access {
}
AbstractExpression <|-[#808080]- Array_access
Array_access o-[#404040,thickness=2]-  Expression : left >
Array_access o-[#404040,thickness=2]-  Expression : right >

class IntE_literal {
	+String name
}
AbstractExpression <|-[#808080]- IntE_literal

class IntE_real {
	+String name
}
AbstractExpression <|-[#808080]- IntE_real

class CharE_literal {
	+String name
}
AbstractExpression <|-[#808080]- CharE_literal

class Variable {
	+String name
}
AbstractExpression <|-[#808080]- Variable
Variable -[#ff6600,thickness=3]-  Variable_definition #text:ff6600 : variable_definition >

class Int_type {
}
AbstractType <|-[#808080]- Int_type

class Real_type {
}
AbstractType <|-[#808080]- Real_type

class Char_type {
}
AbstractType <|-[#808080]- Char_type

class Struct_type {
	+String name
}
AbstractType <|-[#808080]- Struct_type
Struct_type -[#ff6600,thickness=3]-  Struct_definition #text:ff6600 : struct_definition >

class Array_type {
	+String name
}
AbstractType <|-[#808080]- Array_type
Array_type o-[#404040,thickness=2]-  Type : type >

class Void_type {
}
AbstractType <|-[#808080]- Void_type

@enduml
