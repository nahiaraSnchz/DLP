CATEGORIES
type;
statement;
expression;
declaration;

NODES


program -> declaration*;

Variable_definition:declaration -> string type;
Struct_definition:declaration -> string Variable_definition*;
Function_definition:declaration -> string params:Variable_definition* type Variable_definition* statement*;

Return_statement:statement -> expression?;
Print_statement:statement -> expression*;
Printsp_statement:statement -> expression*;
Println_statement:statement -> expression*;
Read_statement:statement -> expression;
While_statement:statement -> expression statement*;
If_statement:statement -> expression st1:statement* st2:statement*;
Assigment_statement:statement -> left:expression right:expression;
Function_call_statement:statement -> string expression*;

Unary_expression:expression -> expression;
Arythmetic_expression:expression -> left:expression operador:string right:expression;
Cast_expression:expression -> type expression;
Comparative_expression:expression -> left:expression operador:string right:expression;
Logical_expression:expression -> left:expression operador:string right:expression;
Parenthesized_expression:expression -> expression;
Expression_call:expression -> string expression*;
Struct_access:expression -> expression string;
Array_access:expression -> left:expression right:expression;
IntE_literal:expression -> string;
IntE_real:expression -> string;
CharE_literal:expression -> string;
// IdE:expression -> string;
Variable:expression -> string;


Int_type:type -> ;
Real_type:type -> ;
Char_type:type -> ;
Struct_type:type -> name:string;
Array_type:type -> string type ;

Void_type:type -> ;


//Return_list:expression -> left:expression right:expression;


// -----------------------
ATTRIBUTE GRAMMAR Identification

Variable -> Variable_definition;
Function_call_statement -> Function_definition;     // llamada a una función desde statement
Expression_call -> Function_definition;             // llamada a una función desde expression
Struct_type-> Struct_definition;


// -----------------------
ATTRIBUTE GRAMMAR TypeChecking

expression -> typeExpression:type;
expression -> lvalue:boolean;
statement -> function:Function_definition;
variable

// -----------------------
ATTRIBUTE GRAMMAR MemoryAllocation

Variable_definition -> [inh] address:int;    // Inherited attribute
Struct_definition -> [inh] address:int;



// -----------------------
CODE SPECIFICATION Mapl

run[program]
execute[statement]
value[expression]
address[expression]

metadata[program]
metadata[Variable_definition]